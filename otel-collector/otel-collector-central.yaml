apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-central
  namespace: opentelemetry
spec:
  mode: statefulset
  serviceAccount: otel-collector-central
  targetAllocator:
    allocationStrategy: consistent-hashing
    serviceAccount: otel-target-allocator
    enabled: true
    filterStrategy: relabel-config
    observability:
      metrics:
        enableMetrics: false
    prometheusCR:
      enabled: true
      podMonitorSelector: {}
      scrapeInterval: 30s
      serviceMonitorSelector: {}
  env:
    - name: DASH0_AUTHORIZATION_TOKEN
      valueFrom:
        secretKeyRef:
          name: dash0-secrets
          key: dash0-authorization-token
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: node.name=$(K8S_NODE_NAME)
  config:
    exporters:
      otlp/dash0:
        auth:
          authenticator: bearertokenauth/dash0
        endpoint: ingress.eu-west-1.aws.dash0-dev.com:4317
      otlphttp/prometheus:
        endpoint: http://prometheus.default.svc.cluster.local:9090/api/v1/otlp
        tls:
          insecure: true

    extensions:
      bearertokenauth/dash0:
        scheme: Bearer
        token: ${env:DASH0_AUTHORIZATION_TOKEN}
      health_check:
        endpoint: "0.0.0.0:13133"
    processors:
      batch: {}
      resource:
        attributes:
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: insert
      k8sattributes:
        extract:
          metadata:
          - k8s.cluster.uid
          - k8s.cronjob.name
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.deployment.name
          - k8s.deployment.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.hostname
          - k8s.pod.ip
          - k8s.pod.name
          - k8s.pod.start_time
          - k8s.pod.uid
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 50
        spike_limit_percentage: 30
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 10s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]
            metric_relabel_configs:
            - action: labeldrop
              regex: (id|name)
              replacement: $$1
            - action: labelmap
              regex: label_(.+)
              replacement: $$1
      k8s_cluster:
        auth_type: serviceAccount
        node_conditions_to_report:
          - Ready
          - MemoryPressure
        allocatable_types_to_report:
          - cpu
          - memory
      k8sobjects:
        objects:
          - name: events
            mode: "watch"
            group: "events.k8s.io"
            exclude_watch_type:
              - "DELETED"
    service:
      extensions:
        - bearertokenauth/dash0
        - health_check
      pipelines:
        metrics:
          exporters:
            - otlp/dash0
            - otlphttp/prometheus
          processors:
            - k8sattributes
            - resource
            - batch
          receivers:
            - k8s_cluster
            - prometheus
        logs:
          exporters:
            - otlp/dash0
          processors:
            - k8sattributes
            - batch
          receivers:
            - k8sobjects
      telemetry:
        metrics:
          address: 0.0.0.0:8888